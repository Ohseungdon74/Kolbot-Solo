var StarterConfig = {
	MinGameTime: 300, // 최소 게임 길이 (초). 게임이 너무 빨리 종료되면 나머지 시간은 로비에서 대기합니다.
	PingQuitDelay: 30, // 높은 핑으로 인해 종료 후 로비에서 대기하는 시간 (초)
	CreateGameDelay: 10, // 새 게임을 만들기 전에 기다려야하는 시간
	ResetCount: 999, // X 게임마다 게임 카운트를 1로 재설정합니다.
	CharacterDifference: 99, // 캐릭터 레벨 차이. 문자 차이를 사용하지 않으려면 false로 설정하십시오.
	ChatActionsDelay: 2, // 채널에 들어가기 전에 로비에서 기다리는 시간

	// 채널 구성은 개별 프로필에 대해 이러한 옵션을 재정의 할 수 있습니다.
	JoinChannel: "", // 기본 채널. 채널 배열 일 수 있음-[ "채널 1", "채널 2"]
	FirstJoinMessage: "", // 기본 참여 메시지. 메시지의 배열 일 수 있습니다.
	AnnounceGames: false, // 기본값
	AfterGameMessage: "", // 게임 종료 후 기본 메시지입니다. 메시지의 배열 일 수 있습니다.
	SwitchKeyDelay: 300, // 사용 금지된 키를 전환하기 전 또는 영역이 다운 된 후 기다리는 시간 (초)
	CrashDelay: 10, // d2 창 충돌 후 대기 시간 (초)
	FTJDelay: 300, // 게임 생성에 실패한 후 기다리는 시간
	RealmDownDelay: 10, // Realm Down 메시지를받은 후 기다리는 시간
	InvalidPasswordDelay: 10, // 잘못된 암호 메시지를받은 후 대기하는 시간 (분)
	UnableToConnectDelay: 5, // 연결할 수 없음 메시지 후 대기 시간 (분)
	TCPIPNoHostDelay: 5, // 서버에 연결할 수 없음 메시지 후 대기 시간 (초)
	CDKeyInUseDelay: 5, // CD-Key가 사용중인 경우 다시 연결하기 전에 대기하는 시간 (분).
	ConnectingTimeout: 10, // '연결 중 ...'화면을 취소하기 전에 기다려야하는 시간 (초)
	PleaseWaitTimeout: 100, // '잠시 기다려주십시오 ...'화면을 취소하기 전에 기다려야하는 시간 (초)
	WaitInLineTimeout: 12000, // 'Waiting in Line ...'화면을 취소하기 전에 기다려야하는 시간 (초)
	GameDoesNotExistTimeout: 600, // '게임이 존재하지 않습니다'를 취소하기 전에 기다려야하는 시간입니다. 화면
	DelayBeforeLogin: rand(5, 25),	// 로그인하기 전에 기다려야하는 시간 (초)
	VersionErrorDelay: rand(5, 30),	// '버전을 식별 할 수 없음'메시지 후 대기 시간 (초)
	GlobalAccountPassword: "" // 계정 생성을위한 전역 암호 값 설정
};

var ChannelConfig = {
	/* 채널 참여, 첫 번째 참여 메시지, 게임 발표 및 프로필 별 게임 후 메시지의 기본값을 재정의합니다.
		이러한 옵션을 원하는만큼 재정의 할 수 있습니다 (모두 입력 할 필요는 없음).

		**** 이 코멘트 블록 안의 어떤 것도 편집하지 마십시오 ***

		Format:

		"Profile Name": {
			JoinChannel: "channel name", -OR- ["channel 1", "channel 2"],
			FirstJoinMessage: "first message", -OR- ["join msg 1", "join msg 2"],
			AnnounceGames: true,
			AfterGameMessage: "message after a finished run" -OR- ["msg 1", msg 2"]
		}

		Multiple entries are separated by a comma

		Examples:

		"Profile 1": {
			JoinChannel: "my channel",
			FirstJoinMessage: ".login",
			AnnounceGames: true,
			AfterGameMessage: "follow my runs or die"
		},
		"Profile 2": {
			JoinChannel: ["channel 1", "channel 2"],
			FirstJoinMessage: [".login", "^login"],
			AfterGameMessage: ["follow my runs or die", "seriously, you'll die"]
		}
	*/

	// 여기에 라인 추가

};

// 건드리지 마!
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
include("common/pather.js");
include("SoloLeveling/Tools/Developer.js");
include("SoloLeveling/Tools/Tracker.js");
include("SoloLeveling/Tools/NameGen.js");
include("SoloLeveling/Tools/OOGOverrides.js");

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
	delay(Math.floor(rand(1, 20)));
}

if (Developer.logPerformance) {
	Tracker.initialize();
}
var gameInfo, gameStart, ingame, chatActionsDone, pingQuit, myExp, myGold, resPenalty, frRes, crRes, lrRes, prRes, areaName, diffName,
	handle, useChat, firstLogin, connectFail, setUp, deadCheck, connectFailRetry,
	battlenet = Profile().type === 2 ? true : false,
	gameCount = DataFile.getStats().runs + 1,
	lastGameStatus = "ready",
	isUp = "no",
	chanInfo = {
		joinChannel: "",
		firstMsg: "",
		afterMsg: "",
		announce: false
	};

function sayMsg (string) {
	if (!useChat) {
		return;
	}

	say(string);
}

function ReceiveCopyData (mode, msg) {
	var buildCheck, obj;

	switch (msg) {
	case "Handle":
		handle = mode;

		break;
	}

	switch (mode) {
	case 2: // Game info
		print("받은 게임 정보");

		gameInfo = JSON.parse(msg);

		break;
	case 3: // Game request
		// Don't let others join mule/torch/key/gold drop game
		if (AutoMule.inGame || Gambling.inGame || TorchSystem.inGame || CraftingSystem.inGame) {
			break;
		}

		if (gameInfo) {
			obj = JSON.parse(msg);

			if (me.gameReady) {
				D2Bot.joinMe(obj.profile, me.gamename.toLowerCase(), "", me.gamepassword.toLowerCase(), isUp);
			} else {
				D2Bot.joinMe(obj.profile, gameInfo.gameName.toLowerCase(), gameCount, gameInfo.gamePass.toLowerCase(), isUp);
			}
		}

		break;
	case 4: // Heartbeat ping
		if (msg === "pingreq") {
			sendCopyData(null, me.windowtitle, 4, "pingrep");
		}

		break;
	case 0xf124: // Cached info retrieval
		if (msg !== "null") {
			gameInfo.crashInfo = JSON.parse(msg);
		}

		break;
	case 1638:
		obj = JSON.parse(msg);
		setUp = {};
		setUp.profile = me.profile.toUpperCase();
		setUp.account = obj.Account;
		setUp.charName = obj.Character;
		setUp.tag = obj.Tag;

		switch (obj.Realm.toLowerCase()) {
		case "east":
			setUp.realm = "useast";
			break;
		case "west":
			setUp.realm = "uswest";
			break;
		case "asia":
			setUp.realm = "asia";
			break;
		case "europe":
			setUp.realm = "europe";
			break;
		}

		buildCheck = setUp.profile.split("-"); // SCL-ZON123
		setUp.hardcore = buildCheck[0].indexOf("HC") !== -1; // SC softcore = false
		setUp.expansion = buildCheck[0].indexOf("CC") === -1; // not CC so not classic - true
		setUp.ladder = buildCheck[0].indexOf("NL") === -1; // not NL so its ladder - true
		buildCheck[1] = buildCheck[1].toString().substring(0, 3); // removes numbers ZON for switch

		switch (buildCheck[1]) {
		case "ZON":
			setUp.charClass = "amazon";
			break;
		case "SOR":
			setUp.charClass = "sorceress";
			break;
		case "NEC":
			setUp.charClass = "necromancer";
			break;
		case "PAL":
			setUp.charClass = "paladin";
			break;
		case "BAR":
			setUp.charClass = "barbarian";
			break;
		case "DRU":
			setUp.charClass = "druid";
			break;
		case "SIN":
			setUp.charClass = "assassin";
			break;
		default:
			D2Bot.updateStatus('프로필 이름을 업데이트하십시오. 예 : "HCCNL-PAL"은 하드 코어 클래식 논 래더 성기사를 만듭니다.');
			D2Bot.printToConsole('프로필 이름을 업데이트하십시오. 예 : "HCCNL-PAL"은 하드 코어 클래식 논 래더 성기사를 만듭니다.', 6);
			D2Bot.stop();

			break;
		}

		if (setUp.tag !== "") {
			setUp.tag = setUp.tag[0].toUpperCase() + setUp.tag.substring(1).toLowerCase();
			D2Bot.setProfile(null, null, null, null, null, setUp.tag);
			DataFile.updateStats("finalBuild", setUp.tag);
		} else {
			D2Bot.updateStatus('프로필 InfoTag에 libs/SoloLeveling/BuildFiles에서 직업을 선택하세요.');
			D2Bot.printToConsole('프로필 InfoTag에 libs/SoloLeveling/BuildFiles에서 직업을 선택하세요.', 6);
			D2Bot.stop();

			break;
		}

		break;
	}
}

function deleteAndRemakeChar (info) {
	me.blockMouse = true;

	var control, text;
		
	ControlAction.findCharacter(info); //Scroll down until the specific control is visible

	MainLoop:
		while (getLocation() !== 1) { // cycle until in lobby
			switch (getLocation()) {
				case 12: // character select
					control = getControl(4, 37, 178, 200, 92);

					if (control) {
						do {
							text = control.getText();

							if (text instanceof Array && typeof text[1] === "string" && text[1].toLowerCase() === info.charName.toLowerCase()) {
								control.click();
								ControlAction.click(6, 433, 528, 168, 60); // click delete
								delay(500);
								ControlAction.click(6, 421, 337, 96, 32); // confirm delete

								break MainLoop;
							}
						} while (control.getNext());
					}

					break;
				case 42: // empty character select
					break MainLoop;

					break;
				case 14: // disconnected?
				case 30: // player not found?
					me.blockMouse = false;

					return false;
				default:
					break;
			}

			delay(100);
		}

	me.blockMouse = false;

	//Delete old files - leaving csv file's for now as I don't think they interfere with the overlay
	FileTools.remove("data/" + me.profile + ".json");
	FileTools.remove("libs/SoloLeveling/Data/" + me.profile + ".GameTime" + ".json");

	if (Developer.logPerformance) {
		Tracker.initialize();
	}


	D2Bot.printToConsole("Deleted: " + info.charName + ". Now remaking...", 6);

	ControlAction.makeCharacter(setUp);

	return true;

}

function setNextGame () {
	var nextGame = gameInfo.gameName;

	if (StarterConfig.ResetCount && gameCount + 1 >= StarterConfig.ResetCount) {
		nextGame += 1;
	} else {
		nextGame += (gameCount + 1);
	}

	DataFile.updateStats("다음 방제", nextGame);
}

function locationTimeout (time, location) {
	var endtime = getTickCount() + time;

	while (getLocation() === location && endtime > getTickCount()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function updateCount () {
	D2Bot.updateCount();
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		login(me.profile);
	} catch (e) {
		//
	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}

function ScriptMsgEvent (msg) {
	switch (msg) {
	case "mule":
		AutoMule.check = true;

		break;
	case "muleTorch":
		AutoMule.torchAnniCheck = 1;

		break;
	case "muleAnni":
		AutoMule.torchAnniCheck = 2;

		break;
	case "torch":
		TorchSystem.check = true;

		break;
	case "crafting":
		CraftingSystem.check = true;

		break;
	case "getMuleMode":
		if (AutoMule.torchAnniCheck === 2) {
			scriptBroadcast("2");
		} else if (AutoMule.torchAnniCheck === 1) {
			scriptBroadcast("1");
		} else if (AutoMule.check) {
			scriptBroadcast("0");
		}

		break;
	case "pingquit":
		pingQuit = true;

		break;
	}
}

function timer (tick) {
	return " (" + new Date(getTickCount() - tick).toISOString().slice(11, -5) + ")";
}

function randomString (len, useNumbers = false) {
	var i, rval = "",
		letters = useNumbers ? "abcdefghijklmnopqrstuvwxyz0123456789" : "abcdefghijklmnopqrstuvwxyz";

	len = len ? len : rand(5, 14);

	for (i = 0; i < len; i += 1) {
		rval += letters[rand(0, letters.length - 1)];
	}

	return rval;
}

function locationAction (location) {
	var i, control, string, text;

	MainSwitch:
	switch (location) {
	case 0:
		ControlAction.click();

		break;
	case 1:	// Lobby
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;

		if (!firstLogin) {
			firstLogin = true;
		}

		if (lastGameStatus === "pending") {
			gameCount += 1;
		}

		if (StarterConfig.PingQuitDelay && pingQuit) {
			ControlAction.timeoutDelay("Ping Delay", StarterConfig.PingQuitDelay * 1e3);

			pingQuit = false;
		}

		if (StarterConfig.JoinChannel !== "" || (ChannelConfig[me.profile] && ChannelConfig[me.profile].JoinChannel !== "")) {
			ControlAction.click(6, 27, 480, 120, 20);

			break;
		}

		if (ingame || gameInfo.error) {
			if (!gameStart) {
				gameStart = DataFile.getStats().ingameTick;
			}

			if (getTickCount() - gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("게임 진입 대기 :", StarterConfig.MinGameTime * 1e3 + gameStart - getTickCount());
			}
		}

		if (ingame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			D2Bot.updateRuns();

			gameCount += 1;
			lastGameStatus = "준비";
			ingame = false;

			if (StarterConfig.ResetCount && gameCount > StarterConfig.ResetCount) {
				gameCount = 1;

				DataFile.updateStats("runs", gameCount);
			}
		}

		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			break;
		}

		deadCheck = setUp.hardcore === true && (getControl(6, 533, 469, 120, 20) && getControl(6, 533, 469, 120, 20).disabled === 4);

		if (deadCheck) {
			D2Bot.updateStatus("캐릭터 사망");
			D2Bot.PrintToConsole("캐릭터 사망.", 6);
			delay(5000);
			ControlAction.click(6, 693, 490, 80, 20);
			break;
		}

		if (!locationTimeout(5000, location)) { // in case create button gets bugged
			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}

			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}
		}

		break;
	case 2: // Waiting In Line
		D2Bot.updateStatus("대기합니다...");
		locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 3: // Lobby Chat
		D2Bot.updateStatus("Lobby Chat");

		if (lastGameStatus === "pending") {
			gameCount += 1;
		}

		if (ingame || gameInfo.error) {
			if (!gameStart) {
				gameStart = DataFile.getStats().ingameTick;
			}

			if (getTickCount() - gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("게임 대기 :", StarterConfig.MinGameTime * 1e3 + gameStart - getTickCount());
			}
		}

		if (ingame) {
			//D2Bot.store(JSON.stringify({currScript: "none", area: "out of game"}));

			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("런 업데이트");
			D2Bot.updateRuns();

			gameCount += 1;
			lastGameStatus = "준비";
			ingame = false;

			if (StarterConfig.ResetCount && gameCount > StarterConfig.ResetCount) {
				gameCount = 1;

				DataFile.updateStats("runs", gameCount);
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AfterGameMessage")) {
				chanInfo.afterMsg = ChannelConfig[me.profile].AfterGameMessage;
			} else {
				chanInfo.afterMsg = StarterConfig.AfterGameMessage;
			}

			if (chanInfo.afterMsg) {
				if (typeof chanInfo.afterMsg === "string") {
					chanInfo.afterMsg = [chanInfo.afterMsg];
				}

				for (i = 0; i < chanInfo.afterMsg.length; i += 1) {
					sayMsg(chanInfo.afterMsg[i]);
					delay(500);
				}
			}
		}

		if (!chatActionsDone) {
			chatActionsDone = true;

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("JoinChannel")) {
				chanInfo.joinChannel = ChannelConfig[me.profile].JoinChannel;
			} else {
				chanInfo.joinChannel = StarterConfig.JoinChannel;
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("FirstJoinMessage")) {
				chanInfo.firstMsg = ChannelConfig[me.profile].FirstJoinMessage;
			} else {
				chanInfo.firstMsg = StarterConfig.FirstJoinMessage;
			}

			if (chanInfo.joinChannel) {
				if (typeof chanInfo.joinChannel === "string") {
					chanInfo.joinChannel = [chanInfo.joinChannel];
				}

				if (typeof chanInfo.firstMsg === "string") {
					chanInfo.firstMsg = [chanInfo.firstMsg];
				}

				for (i = 0; i < chanInfo.joinChannel.length; i += 1) {
					ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);

					if (ControlAction.joinChannel(chanInfo.joinChannel[i])) {
						useChat = true;
					} else {
						print("ÿc1채널에 참여할 수 없습니다. 채팅 메시지를 사용할 수 없습니다..");

						useChat = false;
					}

					if (chanInfo.firstMsg[i] !== "") {
						sayMsg(chanInfo.firstMsg[i]);
						delay(500);
					}
				}
			}
		}

		// Announce game
		if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AnnounceGames")) {
			chanInfo.announce = ChannelConfig[me.profile].AnnounceGames;
		} else {
			chanInfo.announce = StarterConfig.AnnounceGames;
		}

		if (chanInfo.announce) {
			sayMsg("다음 게임은 " + gameInfo.gameName + gameCount + (gameInfo.gamePass === "" ? "" : "//" + gameInfo.gamePass));
		}

		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			break;
		}

		if (!locationTimeout(5000, location)) { // in case create button gets bugged
			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}

			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}
		}

		break;
	case 4: // Create Game
		ControlAction.timeoutDelay("게임생성대기 : ", StarterConfig.DelayBeforeLogin * 1e3);
		D2Bot.updateStatus("Creating Game");

		control = getControl(1, 657, 342, 27, 20);

		// Set character difference
		if (typeof StarterConfig.CharacterDifference === "number") {
			if (control.disabled === 4) {
				ControlAction.click(6, 431, 341, 15, 16);
			}

			ControlAction.setText(1, 657, 342, 27, 20, StarterConfig.CharacterDifference.toString());
		} else if (StarterConfig.CharacterDifference === false && control.disabled === 5) {
			ControlAction.click(6, 431, 341, 15, 16);
		}

		// Get game name if there is none
		while (!gameInfo.gameName) {
			D2Bot.requestGameInfo();
			delay(500);
		}

		if (DataFile.getStats().setDifficulty) {
			gameInfo.difficulty = DataFile.getStats().setDifficulty;
			D2Bot.setProfile(null, null, null, gameInfo.difficulty);
			delay(200);
		}

		// FTJ handler
		if (lastGameStatus === "pending") {
			isUp = "no";

			D2Bot.printToConsole("게임 생성에 실패하였습니다.");
			ControlAction.timeoutDelay("FTJ delay", StarterConfig.FTJDelay * 1e3);
			D2Bot.updateRuns();
		}

		ControlAction.createGame((gameInfo.gameName === "Name" ? randomString(null, true) : gameInfo.gameName + gameCount), (gameInfo.gamePass === "Password" ? randomString(null, true) : gameInfo.gamePass), gameInfo.difficulty, StarterConfig.CreateGameDelay * 1000);
		lastGameStatus = "pending";
		setNextGame();
		locationTimeout(10000, location);

		break;
	case 5: // Join Game
		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
	case 9: // Login
	case 18: // D2 Splash
		// Single Player screen fix
		if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
			ControlAction.click(6, 33, 572, 128, 35);

			break;
		}

		if (firstLogin && getLocation() === 9) { // multiple realm botting fix in case of R/D or disconnect
			ControlAction.click(6, 33, 572, 128, 35);
		}

		D2Bot.updateStatus("로그인");

		try {
			if (battlenet) { // make battlenet accounts/characters
				ControlAction.timeoutDelay("로그인 대기", StarterConfig.DelayBeforeLogin * 1e3);

				if (setUp.account !== "") { // existing account
					try {
						login(me.profile);
					} catch (error) {
						if (DataFile.getStats().AcctPswd) {
							setUp.account = DataFile.getStats().AcctName;
							setUp.password = DataFile.getStats().AcctPswd;

							if (!ControlAction.loginAccount(setUp)) { // generated account login from stored datafile info
								D2Bot.printToConsole('솔로레벨링: 로그인 실패. 당신의 프로필설정을 업데이트 그리고 다시 시작하세요.', 6);
								D2Bot.stop();
							}
						}
					}
				} else { // new account
					if (setUp.account === "") { // make char if not found
						if (StarterConfig.GlobalAccountPassword) {
							setUp.account = randomString(12, true);
							setUp.password = StarterConfig.GlobalAccountPassword;
							print("계정 정보 생성");
							ControlAction.timeoutDelay("계정 정보 생성", StarterConfig.DelayBeforeLogin * 1e3);
						} else {
							setUp.account = randomString(12, true);
							setUp.password = randomString(12, true);
							print("임의 계정 정보 생성");
							ControlAction.timeoutDelay("임의 계정 정보 생성", StarterConfig.DelayBeforeLogin * 1e3);
						}

						if (ControlAction.makeAccount(setUp)) {
							D2Bot.setProfile(setUp.account, setUp.password);
							DataFile.updateStats("AcctName", setUp.account);
							DataFile.updateStats("AcctPswd", setUp.password);

							break;
						} else {
							setUp.account = "";
							setUp.password = "";
							D2Bot.setProfile(setUp.account, setUp.password);
							D2Bot.restart(true);
						}
					}
				}
			} else { // SP/TCP  characters
				try {
					login(me.profile);
				} catch (err) {
					if (!ControlAction.findCharacter(setUp)) { // make char if not found
						if (getLocation() === 30) {	// Pop-up that happens when choosing a dead HC char
							ControlAction.click(6, 351, 337, 96, 32);	//Exit from that pop-up
							D2Bot.printToConsole("케릭터 사망", 9);
							deleteAndRemakeChar(setUp);

						} else {
							ControlAction.makeCharacter(setUp);
						}
						
					}
				}
			}
		} catch (e) {
			print(e + " " + getLocation());
		}

		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5232): // illegal characters
			case getLocaleString(5233): // disallowed words
				D2Bot.stop();

				break;
			case getLocaleString(5207):
				D2Bot.updateStatus("잘못된 비밀번호");
				D2Bot.printToConsole("암호가 정확하지 않습니다.");
				ControlAction.timeoutDelay("암호가 정확하지 않습니다.", StarterConfig.InvalidPasswordDelay * 6e4);
				D2Bot.printToConsole("잘못된 비밀번호 - 재시작");
				D2Bot.restart();

				break;
			case getLocaleString(5219): // password must be 2 characters
				D2Bot.updateStatus("비밀번호는 2자 이상이여야합니다.");
				D2Bot.printToConsole("비밀번호는 2자 이상이여야합니다.");
				D2Bot.stop();

				break;
			case getLocaleString(5208): // Invalid account
			case getLocaleString(5239): // An account name already exists
			case getLocaleString(5249): // Unable to create account
				D2Bot.updateStatus("잘못된 계정 이름");
				D2Bot.printToConsole("잘못된 계정 이름");
				setUp.account = "";
				setUp.password = "";
				D2Bot.setProfile(setUp.account, setUp.password);
				D2Bot.restart(true);

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("잘못된 CDKey");
				D2Bot.printToConsole("잘못된 CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("연결 끊김 battle.net.");
				D2Bot.printToConsole("연결 끊김 battle.net.");
				ControlAction.click(6, 351, 337, 96, 32);
				ControlAction.click(6, 335, 412, 128, 35);

				break MainSwitch;
			default:
				D2Bot.updateStatus("로그인 에러");
				D2Bot.printToConsole("로그인 에러 - " + string);

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);
		delay(1000);
		ControlAction.click(6, 33, 572, 128, 35);

		break;
	case 11: // Unable To Connect
		D2Bot.updateStatus("연결 끊김");

		if (connectFailRetry < 2) {
			connectFailRetry += 1;
			ControlAction.click(6, 335, 450, 128, 35);

			break;
		}

		if (connectFailRetry >= 2) {
			connectFail = true;
		}

		if (connectFail) {
			ControlAction.timeoutDelay("연결 끊김", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		}

		if (!ControlAction.click(6, 335, 450, 128, 35)) {
			break;
		}

		connectFailRetry = 0;
		connectFail = true;

		break;
	case 13: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		ControlAction.timeoutDelay("렐름 다운", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (gameInfo.switchKeys && !gameInfo.rdBlocker) {
			D2Bot.printToConsole("렐름 다운 - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.printToConsole("Realm Down - Restart");
			D2Bot.restart();
		}

		break;
	case 14: // Character Select / Main Menu - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		D2Bot.printToConsole(gameInfo.mpq + " is in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
		D2Bot.CDKeyInUse();

		if (gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		text = ControlAction.getText(4, 162, 270, 477, 50);
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(gameInfo.mpq + " LoD key in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
			D2Bot.CDKeyInUse();

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case 12: // Character Select
	case 23: // Character Select - Connecting
	case 29: // fix for unhandled location crashes at char creation
	case 42: // Empty character screen
		string = "";
		text = ControlAction.getText(4, 45, 318, 531, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}


		if (deadCheck) {
			deleteAndRemakeChar(setUp);
			deadCheck = false;
		}                    

		if (setUp) {
			if (!ControlAction.findCharacter(setUp)) {
				if (setUp.charName === DataFile.getObj().name) {
					ControlAction.timeoutDelay("[R/D] Character not found ", 18e4);
					D2Bot.printToConsole("새로운 캐릭터 생성 방지-재시작");
					D2Bot.restart();
				} else {
					ControlAction.makeCharacter(setUp);
				}
			} else {
				ControlAction.loginCharacter(setUp);
			}
		}

		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);

			if (gameInfo.rdBlocker) {
				D2Bot.restart();
			}
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		ControlAction.click(6, 533, 469, 120, 20);

		gameCount += 1;
		lastGameStatus = "ready";

		break;
	case 27: // Gateway Select
		ControlAction.click(6, 436, 538, 96, 32);

		break;
	case 28: // Lobby - Game Does Not Exist
		D2Bot.printToConsole("Game doesn't exist");

		if (gameInfo.rdBlocker) {
			D2Bot.printToConsole(gameInfo.mpq + " is probably flagged.", 6);

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			}
		} else {
			locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		lastGameStatus = "ready";

		break;
	case 34: // e-mail
		if (getControl(6, 415, 412, 128, 35)) {
			ControlAction.click(6, 415, 412, 128, 35);
		} else {
			ControlAction.click(6, 265, 572, 272, 35);
		}

		break;
	case 38: // Game is full
		// doesn't happen when making
		break;
	case 39: // Other Multiplayer
		ControlAction.click(6, 264, 568, 272, 35);

		break;
	case 40: // TCP/IP Game
		ControlAction.click(6, 39, 571, 128, 35);

		break;
	case 41: // TCP/IP Game - Enter Host IP
		try {
			login(me.profile);
		} catch (e) {
		//
		}

		break;
	case 44: // Unable To Connect TCP/IP
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		ControlAction.click(6, 351, 337, 96, 32);

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	debugLog(me.profile);
	addEventListener('copydata', ReceiveCopyData);
	addEventListener('scriptmsg', ScriptMsgEvent);

	while (!handle) {
		delay(100);
	}

	DataFile.updateStats("handle", handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!gameInfo) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (gameInfo.error) {
		delay(200);
		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!setUp) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	if (setUp.charName === "") {
		setUp.charName = NameGen();
		D2Bot.setProfile(null, null, setUp.charName);
		print("Generating Character Name");
		delay(50);
	}

	var wasInGame = false;

	while (true) {
		while (me.ingame) { // returns true before actually in game so we can't only use this check
			if (me.gameReady) { // returns false when switching acts so we can't use while
				isUp = "yes";

				if (!ingame) {
					gameStart = getTickCount();
					lastGameStatus = "ingame";
					ingame = true;
					DataFile.updateStats("runs", gameCount);
					DataFile.updateStats("ingameTick");
				}

				myExp = me.getStat(13) > 0 ? Experience.progress() : 0;
				myGold = me.getStat(14) + me.getStat(15);
				resPenalty = me.gametype === 0 ? [ 0, 20, 50][me.diff] : [ 0, 40, 100][me.diff];
				frRes = Math.min(75, me.getStat(39) - resPenalty);
				crRes = Math.min(75, me.getStat(43) - resPenalty);
				lrRes = Math.min(75, me.getStat(41) - resPenalty);
				prRes = Math.min(75, me.getStat(45) - resPenalty);
				areaName = getArea().name;
				diffName = ['Normal', 'Nightmare', 'Hell'][me.diff];

				if (me.ingame) {
					D2Bot.updateStatus("레벨: " + me.charlvl + " (" + myExp + "%) | 난이도: " + diffName + " | 지역: " + areaName + " | 골드: " + myGold + " | FR: " + frRes + " | CR: " + crRes + " | LR: " + lrRes + " | PR: " + prRes + " " + timer(gameStart));
				}
			}

			delay(1000);
		}

		isUp = "no";
		locationAction(getLocation());
		delay(1000);
	}
}
